import React, { useState } from 'react';
import styled from 'styled-components';

const GalleryContainer = styled.div<{ isDark: boolean }>`
  padding-top: 90px;
  min-height: 100vh;
  background-color: ${({ isDark }) => isDark ? '#1a1a1a' : '#ffffff'};
  color: ${({ isDark }) => isDark ? '#ffffff' : '#333333'};
`;

const GalleryHeader = styled.div`
  text-align: center;
  padding: 60px 0;
  background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
`;

const GalleryTitle = styled.h1`
  font-size: 3rem;
  font-weight: bold;
  margin-bottom: 20px;
  color: #333;
`;

const GallerySubtitle = styled.p`
  font-size: 1.2rem;
  color: #6c757d;
  max-width: 800px;
  margin: 0 auto;
  line-height: 1.6;
`;

const GalleryContent = styled.div`
  max-width: 1200px;
  margin: 0 auto;
  padding: 60px 20px;
`;

const FilterButtons = styled.div`
  display: flex;
  justify-content: center;
  gap: 15px;
  margin-bottom: 40px;
  flex-wrap: wrap;
`;

const FilterButton = styled.button<{ isActive: boolean; isDark: boolean }>`
  padding: 10px 20px;
  border-radius: 25px;
  border: 2px solid ${({ isActive, isDark }) => 
    isActive 
      ? (isDark ? '#4a9eff' : '#007bff')
      : (isDark ? '#404040' : '#e0e0e0')
  };
  background-color: ${({ isActive, isDark }) => 
    isActive 
      ? (isDark ? '#4a9eff' : '#007bff')
      : 'transparent'
  };
  color: ${({ isActive, isDark }) => 
    isActive 
      ? '#ffffff'
      : (isDark ? '#ffffff' : '#333333')
  };
  font-weight: 500;
  cursor: pointer;
  transition: all 0.3s ease;

  &:hover {
    background-color: ${({ isActive, isDark }) => 
      isActive 
        ? (isDark ? '#3a8eef' : '#0056b3')
        : (isDark ? '#404040' : '#f8f9fa')
    };
  }
`;

const GalleryGrid = styled.div`
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
  gap: 30px;
`;

const GalleryItem = styled.div<{ isDark: boolean }>`
  background-color: ${({ isDark }) => isDark ? '#2d2d2d' : '#ffffff'};
  border-radius: 15px;
  overflow: hidden;
  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
  transition: transform 0.3s ease;
  cursor: pointer;

  &:hover {
    transform: translateY(-5px);
  }
`;

const GalleryImage = styled.div`
  width: 100%;
  height: 250px;
  background: linear-gradient(135deg, #f8f9fa, #e9ecef);
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 4rem;
  position: relative;
  overflow: hidden;
`;

const GalleryOverlay = styled.div`
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0, 123, 255, 0.8);
  display: flex;
  align-items: center;
  justify-content: center;
  opacity: 0;
  transition: opacity 0.3s ease;
  color: white;
  font-size: 1.5rem;
  font-weight: bold;

  ${GalleryItem}:hover & {
    opacity: 1;
  }
`;

const GalleryInfo = styled.div`
  padding: 20px;
`;

const GalleryItemTitle = styled.h3`
  font-size: 1.2rem;
  font-weight: 600;
  margin-bottom: 10px;
  color: #333;
`;

const GalleryItemDescription = styled.p`
  color: #6c757d;
  line-height: 1.5;
  font-size: 0.9rem;
`;

const Modal = styled.div<{ isOpen: boolean }>`
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0, 0, 0, 0.8);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 10000;
  opacity: ${({ isOpen }) => isOpen ? 1 : 0};
  visibility: ${({ isOpen }) => isOpen ? 'visible' : 'hidden'};
  transition: all 0.3s ease;
`;

const ModalContent = styled.div<{ isDark: boolean }>`
  background-color: ${({ isDark }) => isDark ? '#2d2d2d' : '#ffffff'};
  border-radius: 15px;
  padding: 30px;
  max-width: 600px;
  width: 90%;
  max-height: 80vh;
  overflow-y: auto;
  position: relative;
`;

const ModalImage = styled.div`
  width: 100%;
  height: 300px;
  background: linear-gradient(135deg, #f8f9fa, #e9ecef);
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 6rem;
  border-radius: 10px;
  margin-bottom: 20px;
`;

const ModalTitle = styled.h2`
  font-size: 1.8rem;
  font-weight: bold;
  margin-bottom: 15px;
  color: #333;
`;

const ModalDescription = styled.p`
  color: #6c757d;
  line-height: 1.6;
  margin-bottom: 20px;
`;

const CloseButton = styled.button<{ isDark: boolean }>`
  position: absolute;
  top: 15px;
  right: 15px;
  width: 30px;
  height: 30px;
  border-radius: 50%;
  background-color: ${({ isDark }) => isDark ? '#404040' : '#f8f9fa'};
  border: none;
  color: ${({ isDark }) => isDark ? '#ffffff' : '#333333'};
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 18px;
  transition: all 0.3s ease;

  &:hover {
    background-color: #dc3545;
    color: white;
  }
`;

const Gallery: React.FC = () => {
  const [selectedCategory, setSelectedCategory] = useState('all');
  const [selectedItem, setSelectedItem] = useState<any>(null);

  const categories = [
    { id: 'all', name: '–í—Å–µ' },
    { id: 'office', name: '–û—Ñ–∏—Å' },
    { id: 'products', name: '–¢–æ–≤–∞—Ä—ã' },
    { id: 'team', name: '–ö–æ–º–∞–Ω–¥–∞' },
    { id: 'events', name: '–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è' }
  ];

  const galleryItems = [
    {
      id: 1,
      title: '–ù–∞—à –æ—Ñ–∏—Å',
      description: '–°–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–∞–±–æ—á–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ, –≥–¥–µ —Ä–æ–∂–¥–∞—é—Ç—Å—è –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ –∏–¥–µ–∏',
      category: 'office',
      image: 'üè¢'
    },
    {
      id: 2,
      title: '–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤',
      description: '–®–∏—Ä–æ–∫–∏–π –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏ –∏ –≥–∞–¥–∂–µ—Ç–æ–≤',
      category: 'products',
      image: 'üì±'
    },
    {
      id: 3,
      title: '–ö–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤',
      description: '–ù–∞—à–∏ —Ç–∞–ª–∞–Ω—Ç–ª–∏–≤—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –∑–∞ —Ä–∞–±–æ—Ç–æ–π',
      category: 'team',
      image: 'üë•'
    },
    {
      id: 4,
      title: '–°–∫–ª–∞–¥ —Ç–æ–≤–∞—Ä–æ–≤',
      description: '–û—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–∫–∞–∑–æ–≤',
      category: 'products',
      image: 'üì¶'
    },
    {
      id: 5,
      title: '–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ',
      description: '–ö–æ–º–∞–Ω–¥–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏ –ø—Ä–∞–∑–¥–Ω–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—Ö–æ–≤',
      category: 'events',
      image: 'üéâ'
    },
    {
      id: 6,
      title: '–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏',
      description: '–ù–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å –∫–ª–∏–µ–Ω—Ç–∞–º',
      category: 'team',
      image: 'üéß'
    },
    {
      id: 7,
      title: '–í—ã—Å—Ç–∞–≤–∫–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π',
      description: '–£—á–∞—Å—Ç–∏–µ –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö –≤—ã—Å—Ç–∞–≤–∫–∞—Ö –∏ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è—Ö',
      category: 'events',
      image: 'üé™'
    },
    {
      id: 8,
      title: '–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è',
      description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–∞–∂–µ–π',
      category: 'office',
      image: 'üî¨'
    },
    {
      id: 9,
      title: '–ù–æ–≤–∏–Ω–∫–∏ —Å–µ–∑–æ–Ω–∞',
      description: '–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –Ω–∞—à–µ–º –∫–∞—Ç–∞–ª–æ–≥–µ',
      category: 'products',
      image: 'üÜï'
    }
  ];

  const filteredItems = selectedCategory === 'all' 
    ? galleryItems 
    : galleryItems.filter(item => item.category === selectedCategory);

  const handleItemClick = (item: any) => {
    setSelectedItem(item);
  };

  const closeModal = () => {
    setSelectedItem(null);
  };

  return (
    <GalleryContainer isDark={false}>
      <GalleryHeader>
        <div className="container">
          <GalleryTitle>–ì–∞–ª–µ—Ä–µ—è</GalleryTitle>
          <GallerySubtitle>
            –ü–æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–µ–π —á–µ—Ä–µ–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –æ—Ñ–∏—Å–∞, –∫–æ–º–∞–Ω–¥—ã, 
            —Ç–æ–≤–∞—Ä–æ–≤ –∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
          </GallerySubtitle>
        </div>
      </GalleryHeader>

      <GalleryContent>
        <FilterButtons>
          {categories.map((category) => (
            <FilterButton
              key={category.id}
              isActive={selectedCategory === category.id}
              isDark={false}
              onClick={() => setSelectedCategory(category.id)}
            >
              {category.name}
            </FilterButton>
          ))}
        </FilterButtons>

        <GalleryGrid>
          {filteredItems.map((item) => (
            <GalleryItem key={item.id} isDark={false} onClick={() => handleItemClick(item)}>
              <GalleryImage>
                {item.image}
                <GalleryOverlay>üëÅÔ∏è</GalleryOverlay>
              </GalleryImage>
              <GalleryInfo>
                <GalleryItemTitle>{item.title}</GalleryItemTitle>
                <GalleryItemDescription>{item.description}</GalleryItemDescription>
              </GalleryInfo>
            </GalleryItem>
          ))}
        </GalleryGrid>
      </GalleryContent>

      <Modal isOpen={!!selectedItem} onClick={closeModal}>
        <ModalContent isDark={false} onClick={(e) => e.stopPropagation()}>
          <CloseButton isDark={false} onClick={closeModal}>√ó</CloseButton>
          {selectedItem && (
            <>
              <ModalImage>{selectedItem.image}</ModalImage>
              <ModalTitle>{selectedItem.title}</ModalTitle>
              <ModalDescription>{selectedItem.description}</ModalDescription>
            </>
          )}
        </ModalContent>
      </Modal>
    </GalleryContainer>
  );
};

export default Gallery; 